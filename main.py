import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from decouple import config
from openpyxl import Workbook, load_workbook
from datetime import datetime
from io import BytesIO
import os

# Logging
logging.basicConfig(level=logging.DEBUG)  # –ò–∑–º–µ–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logger = logging.getLogger(__name__)

# Config
TOKEN = config("TG_TOKEN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# Runtime state
user_infos = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{username: ..., fio: ...}]
current_question_type = None
current_question = None
current_options = []
user_results = {}
poll_id_to_user = {}
poll_id_to_data = {}

@dp.startup()
async def setup_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        types.BotCommand(command="poll", description="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ–ø—Ä–æ—Å"),
        types.BotCommand(command="text", description="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π"),
        types.BotCommand(command="finish", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ Excel-—Ñ–∞–π–ª (.xlsx) —Å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ( –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @username_to_id_bot ) –≤ 1-–º —Å—Ç–æ–ª–±—Ü–µ, –∞ –§–ò–û (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ‚Äî –≤–æ 2-–º.")

@dp.message(Command("finish"))
async def finish(message: types.Message):
    if not user_results:
        await message.reply("‚ùå –û—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç.")
        return

    wb = Workbook()
    ws = wb.active
    ws.title = "Results"
    ws.append(["Username", "FIO", "Question", "Answer", "Timestamp"])

    # Debug: Print user_results to ensure it's populated correctly
    logger.debug(f"user_results before saving: {user_results}")

    for username, answers in user_results.items():
        for answer in answers:
            question, response, timestamp = answer
            fio = next((user["fio"] for user in user_infos if user["username"] == username), "Unknown")
            ws.append([username, fio, question, response, timestamp])

    file_path = "/tmp/results.xlsx"
    wb.save(file_path)

    await bot.send_document(
        chat_id=message.chat.id,
        document=FSInputFile(file_path, filename="results.xlsx"),
        caption="üìä –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞"
    )
    os.remove(file_path)

@dp.message(F.document)
async def handle_excel(message: types.Message):
    global user_infos
    doc = message.document
    if not doc.file_name.endswith(".xlsx"):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª.")
        return

    file = await bot.download(doc)
    wb = load_workbook(file)
    ws = wb.active

    user_infos = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        username = str(row[0]).strip().lstrip("@") if row[0] else None
        fio = str(row[1]).strip() if len(row) > 1 and row[1] else None
        if username:
            user_infos.append({"username": username, "fio": fio})

    await message.reply(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_infos)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:\nüëâ /poll ‚Äî —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\nüëâ /text ‚Äî –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")

@dp.message(Command("poll"))
async def set_poll_mode(message: types.Message):
    global current_question_type
    current_question_type = "poll"
    await message.reply("‚úÖ –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: <b>–æ–ø—Ä–æ—Å</b>. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?\n–ö—Ä–∞—Å–Ω—ã–π\n–°–∏–Ω–∏–π\n–ó–µ–ª–µ–Ω—ã–π", parse_mode="HTML")

@dp.message(Command("text"))
async def set_text_mode(message: types.Message):
    global current_question_type
    current_question_type = "text"
    await message.reply("‚úÖ –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: <b>—Ç–µ–∫—Å—Ç</b>. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>–í–æ–ø—Ä–æ—Å: –í–∞—à –≤–æ–ø—Ä–æ—Å</code>", parse_mode="HTML")

@dp.message(F.text)
async def handle_question(message: types.Message):
    global current_question, current_options

    if not user_infos:
        await message.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ Excel-—Ñ–∞–π–ª.")
        return
    if not current_question_type:
        await message.reply("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: /poll –∏–ª–∏ /text")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–í–æ–ø—Ä–æ—Å:", —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã –∑–∞–¥–∞–µ—à—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if message.text.startswith("–í–æ–ø—Ä–æ—Å:"):
        if current_question_type == "poll":
            lines = message.text.strip().split("\n")
            if len(lines) < 3 or not lines[0].strip().endswith("?"):
                await message.reply("‚ùå –§–æ—Ä–º–∞—Ç:\n–í–æ–ø—Ä–æ—Å: –í–∞—à –≤–æ–ø—Ä–æ—Å\n–í–∞—Ä–∏–∞–Ω—Ç 1\n–í–∞—Ä–∏–∞–Ω—Ç 2\n...")
                return

            current_question = lines[0].strip()
            current_options = [line.strip() for line in lines[1:] if line.strip()]
            await send_poll_question(message)

        elif current_question_type == "text":
            current_question = "–í–æ–ø—Ä–æ—Å: " + message.text.strip()  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–≤–æ–ø—Ä–æ—Å: "
            current_options = []
            await send_text_question(message)
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –∑–∞–¥–∞–Ω, —Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if current_question:
            user = message.from_user.username
            if user not in user_results:
                user_results[user] = []
            user_results[user].append((current_question, message.text.strip(), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

            # Debug: Log the answer
            logger.debug(f"Saved answer: {current_question} -> {message.text.strip()} for user {user}")
            logger.debug(f"Current user_results: {user_results}")  # Log the user_results state to check for any issues
            await message.reply("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")

async def send_poll_question(message):
    success = 0
    fail = 0
    for info in user_infos:
        username = info["username"]
        try:
            chat = await bot.get_chat(username)
            poll = await bot.send_poll(
                chat_id=chat.id,
                question=current_question,
                options=current_options,
                is_anonymous=False
            )
            poll_id_to_user[poll.poll.id] = username
            poll_id_to_data[poll.poll.id] = (current_question, current_options)
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø—Ä–æ—Å @{username}: {e}")
            fail += 1
    await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {fail}")

async def send_text_question(message):
    success = 0
    fail = 0
    for info in user_infos:
        username = info["username"]
        fio = info["fio"]
        try:
            chat = await bot.get_chat(username)
            greeting = f"{fio}," if fio else ""
            await bot.send_message(
                chat_id=chat.id,
                text=f"‚úçÔ∏è {greeting} {current_question}",
                parse_mode="HTML"
            )
            if username not in user_results:
                user_results[username] = []
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å @{username}: {e}")
            fail += 1
    await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {fail}")

@dp.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer):
    username = poll_id_to_user.get(poll.poll_id, "Unknown")
    question, options = poll_id_to_data.get(poll.poll_id, ("Unknown", []))
    answer = options[poll.option_ids[0]] if poll.option_ids else "–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if username not in user_results:
        user_results[username] = []

    user_results[username].append((question, answer, timestamp))
    logger.info(f"{username} ‚Üí '{answer}' –Ω–∞ '{question}'")

async def main():
    logger.info("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
