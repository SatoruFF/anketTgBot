import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from decouple import config
from openpyxl import Workbook, load_workbook
from io import BytesIO
from datetime import datetime

"""
Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel-—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
---------------
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start:
   - –ë–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å Excel-—Ñ–∞–π–ª —Å Telegram-username'–∞–º–∏ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @).

2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel-—Ñ–∞–π–ª (.xlsx), –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ —É–∫–∞–∑–∞–Ω—ã username'—ã:
   - –ë–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª.
   - –°—á–∏—Ç—ã–≤–∞–µ—Ç username'—ã –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–≤–∞—è ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫).
   - –ü–æ –∫–∞–∂–¥–æ–º—É username –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º.
   - –û–ø—Ä–æ—Å ‚Äî –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π, —Å –≤–æ–ø—Ä–æ—Å–æ–º "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–±–µ –±–ª–∏–∂–µ?" –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.

3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∏–≤—à–∏–π –æ–ø—Ä–æ—Å, –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
   - –ë–æ—Ç –ª–æ–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å.
   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç username (–∏–ª–∏ user_id), –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ Excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ (BytesIO).

4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_results:
   - –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel-—Ñ–∞–π–ª –≤ —á–∞—Ç.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
-----------
- Aiogram 3.x –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Telegram-–±–æ—Ç–∞.
- –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ openpyxl.
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TG_TOKEN (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞) –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ .env —á–µ—Ä–µ–∑ python-decouple.
- –î–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–ø–ø–∏–Ω–≥ poll_id ‚Üí username.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
-----------
- –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å .xlsx-—Ñ–∞–π–ª–∞–º–∏ (–Ω–µ .csv).
- Telegram username'—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
- –û—Ç–≤–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
"""


# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Config
TOKEN = config("TG_TOKEN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# Excel results setup
result_wb = Workbook()
result_ws = result_wb.active
result_ws.title = "Poll Results"
result_ws.append(["Username", "Answer", "Timestamp"])
excel_stream = BytesIO()

# Poll setup
QUESTION = "Which programming language do you prefer?"
OPTIONS = ["Python", "JavaScript", "Rust", "Go", "Other"]
poll_id_to_user = {}

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.reply("üëã Hello! Send me an Excel file (.xlsx) with Telegram usernames.")
    logger.info(f"/start from {message.from_user.id} ({message.from_user.username})")

@dp.message(F.document)
async def handle_excel_file(message: types.Message):
    doc = message.document
    if not doc.file_name.endswith(".xlsx"):
        await message.reply("‚ùå Please send a valid .xlsx file.")
        return

    file = await bot.download(doc)
    wb = load_workbook(file)
    ws = wb.active

    usernames = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        username = row[0]
        if username:
            usernames.append(username.strip().lstrip("@"))

    await message.reply(f"üì§ Sending poll to {len(usernames)} users...")

    for username in usernames:
        try:
            user = await bot.get_chat(username)
            sent_poll = await bot.send_poll(
                chat_id=user.id,
                question=QUESTION,
                options=OPTIONS,
                is_anonymous=False
            )
            poll_id_to_user[sent_poll.poll.id] = username
            logger.info(f"Poll sent to {username}")
        except Exception as e:
            logger.warning(f"Failed to send poll to @{username}: {e}")

@dp.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer):
    username = poll_id_to_user.get(poll.poll_id, "Unknown")
    answer = OPTIONS[poll.option_ids[0]] if poll.option_ids else "No answer"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    result_ws.append([username, answer, timestamp])
    logger.info(f"{username} answered '{answer}'")

@dp.message(Command("get_results"))
async def get_results(message: types.Message):
    excel_stream.seek(0)
    result_wb.save(excel_stream)
    excel_stream.seek(0)

    await bot.send_document(
        chat_id=message.chat.id,
        document=types.InputFile(excel_stream, filename="poll_results.xlsx"),
        caption="üìä Here are the results!"
    )

async def main():
    logger.info("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
