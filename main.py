import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile 
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from decouple import config
from openpyxl import Workbook
from openpyxl import load_workbook
from io import BytesIO
import os
from datetime import datetime

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Config
TOKEN = config("TG_TOKEN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# Runtime state
usernames = []
poll_id_to_user = {}
poll_id_to_data = {}
user_results = {}

# FSM-–∑–∞–≥–ª—É—à–∫–∞ ‚Äî –±–µ–∑ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
current_question = None
current_options = []

@dp.startup()
async def setup_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="finish", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å Excel"),
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ Excel-—Ñ–∞–π–ª (.xlsx), –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ —É–∫–∞–∑–∞–Ω—ã Telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @username_to_id_bot)")

@dp.message(Command("finish"))
async def finish(message: types.Message):
    if not user_results:
        await message.reply("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    wb = Workbook()
    ws = wb.active
    ws.title = "Results"
    ws.append(["Username", "Question", "Answer", "Timestamp"])

    for username, answers in user_results.items():
        for q, a, t in answers:
            ws.append([username, q, a, t])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_path = "/tmp/poll_results.xlsx"
    wb.save(file_path)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile
    file = FSInputFile(file_path, filename="poll_results.xlsx")
    await bot.send_document(
        chat_id=message.chat.id,
        document=file,
        caption="üìä –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_path)

@dp.message(F.document)
async def handle_excel(message: types.Message):
    global usernames
    doc = message.document
    if not doc.file_name.endswith(".xlsx"):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .xlsx —Ñ–∞–π–ª.")
        return

    file = await bot.download(doc)
    wb = Workbook()
    wb = wb = Workbook(file) if hasattr(file, "read") else Workbook()
    wb = wb = load_workbook(file)
    ws = wb.active

    usernames = [str(row[0]).strip().lstrip("@") for row in ws.iter_rows(min_row=2, values_only=True) if row[0]]
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(usernames)} username'–æ–≤: {usernames}")
    await message.reply(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(usernames)} username'–æ–≤.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<b>–í–æ–ø—Ä–æ—Å?</b>\n–í–∞—Ä–∏–∞–Ω—Ç1\n–í–∞—Ä–∏–∞–Ω—Ç2\n–í–∞—Ä–∏–∞–Ω—Ç3", parse_mode="HTML")

@dp.message(F.text)
async def receive_poll_template(message: types.Message):
    global current_question, current_options

    if not usernames:
        await message.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å username'–∞–º–∏.")
        return

    lines = message.text.strip().split("\n")
    if len(lines) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ù—É–∂–Ω–æ:\n–í–æ–ø—Ä–æ—Å?\n–í–∞—Ä–∏–∞–Ω—Ç1\n–í–∞—Ä–∏–∞–Ω—Ç2\n...")
        return

    question = lines[0].strip()
    if not question.endswith('?'):
        await message.reply("‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '?'")
        return

    options = [line.strip() for line in lines[1:] if line.strip()]
    if len(options) < 2:
        await message.reply("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.")
        return

    current_question = question
    current_options = options

    await message.reply("üì§ –†–∞—Å—Å—ã–ª–∞—é –æ–ø—Ä–æ—Å—ã...")

    success = 0
    failed = 0
    for username in usernames:
        try:
            chat = await bot.get_chat(username)
            poll = await bot.send_poll(
                chat_id=chat.id,
                question=current_question,
                options=current_options,
                is_anonymous=False
            )
            poll_id_to_user[poll.poll.id] = username
            poll_id_to_data[poll.poll.id] = (current_question, current_options)
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å @{username}: {e}")
            failed += 1

    await message.reply(f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")


@dp.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer):
    username = poll_id_to_user.get(poll.poll_id, "Unknown")
    question, options = poll_id_to_data.get(poll.poll_id, ("Unknown", []))
    answer = options[poll.option_ids[0]] if poll.option_ids else "–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if username not in user_results:
        user_results[username] = []

    user_results[username].append((question, answer, timestamp))
    logger.info(f"{username} –≤—ã–±—Ä–∞–ª '{answer}' –Ω–∞ –≤–æ–ø—Ä–æ—Å '{question}'")



async def main():
    logger.info("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
